"0","# num_ppl is the number of samples"
"0","# num_genes is the number of genes in the model"
"0","# prop_true is the proportion of true signals"
"0","# true_var is the variance of signals "
"0","#noise_var is the general noise variance"
"0","sim_from_genetic_model <- function(num_ppl, num_genes, prop_true, true_eff, noise_var) {"
"0","  "
"0","  # First, simulate from the signals"
"0","  signal_vec <- numeric(num_genes)"
"0","  for(i in seq(from = 1, to = num_genes, by = 1)) {"
"0","    "
"0","    if(runif(1) < prop_true) {"
"0","      "
"0","      signal_vec[i] <- true_eff"
"0","      "
"0","    } else {"
"0","      "
"0","      signal_vec[i] <- 0"
"0","      "
"0","    }"
"0","    "
"0","  }"
"0","  "
"0","  # now, for each individual I can just take the dot product of the signal and their genes"
"0","  # then I just need to have noise, and I have the outcome"
"0","  # I'm not sure what type of genetic model we're assuming for the individuals"
"0","  # that probably doesn't matter however"
"0","  G_mat <- matrix(data = rep(0, (num_ppl * num_genes)), nrow = num_ppl, ncol = num_genes)"
"0","  Y_vec <- numeric(num_ppl)"
"0","  for(i in seq(from = 1, to = num_genes, by = 1)) {"
"0","    "
"0","    G_mat[,i] <- rbinom(n = num_ppl, size = 2, prob = .3) # can potentially change this, not sure it matters"
"0","    "
"0","  }"
"0","  "
"0","  for(i in seq(from = 1, to = num_ppl, by = 1)) {"
"0","    "
"0","    Y_vec[i] <- (G_mat[i,] %*% signal_vec) + rnorm(n = 1, mean = 0, sd = sqrt(noise_var))"
"0","    "
"0","  }"
"0","  "
"0","  return(list(Y = Y_vec, G = G_mat))"
"0","  "
"0","}"
