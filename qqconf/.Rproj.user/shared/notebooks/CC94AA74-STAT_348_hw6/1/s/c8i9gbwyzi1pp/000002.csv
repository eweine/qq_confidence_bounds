"0","normalize = function(x){return(x/sum(x))}"
"0","  "
"0","  #' @param x an n vector of data"
"0","  #' @param pi a k vector"
"0","  #' @param mu a k vector"
"0","  sample_z = function(x,pi,mu){"
"0","    dmat = outer(mu,x,""-"") # k by n matrix, d_kj =(mu_k - x_j)"
"0","    p.z.given.x = as.vector(pi) * dnorm(dmat,0,1) "
"0","    p.z.given.x = apply(p.z.given.x,2,normalize) # normalize columns"
"0","    z = rep(0, length(x))"
"0","    for(i in 1:length(z)){"
"0","      z[i] = sample(1:length(pi), size=1,prob=p.z.given.x[,i],replace=TRUE)"
"0","    }"
"0","    return(z)"
"0","  }"
"0"," "
"0","    "
"0","  #' @param z an n vector of cluster allocations (1...k)"
"0","  #' @param k the number of clusters"
"0","  sample_pi = function(z,k){"
"0","    counts = colSums(outer(z,1:k,FUN=""==""))"
"0","    pi = gtools::rdirichlet(1,counts+.5)"
"0","    return(pi)"
"0","  }"
"0","  #' @param x an n vector of data"
"0","  #' @param z an n vector of cluster allocations"
"0","  #' @param k the number o clusters"
"0","  #' @param prior.mean the prior mean for mu"
"0","  #' @param prior.prec the prior precision for mu"
"0","  sample_mu = function(x, z, k, prior){"
"0","    df = data.frame(x=x,z=z)"
"0","    mu = rep(0,k)"
"0","    for(i in 1:k){"
"0","      sample.size = sum(z==i)"
"0","      sample.mean = ifelse(sample.size==0,0,mean(x[z==i]))"
"0","      "
"0","      post.prec = sample.size+prior$prec"
"0","      post.mean = (prior$mean * prior$prec + "
"0","                     sample.mean * sample.size)/post.prec"
"0","      mu[i] = rnorm(1,post.mean,sqrt(1/post.prec))"
"0","    }"
"0","    return(mu)"
"0","  }"
"0","  "
"0","  gibbs = function(x,k,niter =1000,muprior = list(mean=0,prec=0.1)){"
"0","    pi = rep(1/k,k) # initialize"
"0","    mu = rnorm(k,0,10)"
"0","    z = sample_z(x,pi,mu)"
"0","    res = list(mu=matrix(nrow=niter, ncol=k), "
"0","               pi = matrix(nrow=niter,ncol=k), "
"0","               z = matrix(nrow=niter, ncol=length(x)))"
"0","    res$mu[1,]=mu"
"0","    res$pi[1,]=pi"
"0","    res$z[1,]=z "
"0","    for(i in 2:niter){"
"0","        pi = sample_pi(z,k)"
"0","        mu = sample_mu(x,z,k,muprior)"
"0","        z = sample_z(x,pi,mu)"
"0","        res$mu[i,] = mu"
"0","        res$pi[i,] = pi"
"0","        res$z[i,] = z"
"0","    }"
"0","    return(res)"
"0","  }"
