"0","prior = function(f, p){"
"0","  "
"0","  as.numeric(all(between(c(f, p), 0, 1)))"
"0","  "
"0","}"
"0","likelihood = function(f, p, nAA, nAa, naa){"
"0","  freq_nAA <- f * p + (1 - f) * p * p"
"0","  freq_nAa <- (1 - f) * 2 * p * (1 - p)"
"0","  freq_naa <- f * (1 - p) + (1 - f) * (1 - p) * (1 - p)"
"0","  return((freq_nAA ^ nAA) * (freq_nAa ^ nAa) * (freq_naa ^ naa))"
"0","}"
"0","fpsampler = function(nAA, nAa, naa, niter, fstartval, "
"0","                     pstartval, fproposalsd, pproposalsd){"
"0","  f = rep(0,niter)"
"0","  p = rep(0,niter)"
"0","  f[1] = fstartval"
"0","  p[1] = pstartval"
"0","  for(i in 2:niter){"
"0","    currentf = f[i-1]"
"0","    currentp = p[i-1]"
"0","    newf = currentf + rnorm(1,0,fproposalsd)"
"0","    newp = currentp + rnorm(1,0,pproposalsd)"
"0","    A_p <- prior(currentf, newp)*likelihood(currentf, newp,nAA,nAa,naa)/"
"0","      (prior(currentf, currentp) * likelihood(currentf, currentp,nAA,nAa,naa))"
"0","    # Now, need to do sampling for p"
"0","    if(runif(1)<A_p){"
"0","      p[i] = newp       # accept move with probabily min(1,A)"
"0","    } else {"
"0","      p[i] = currentp        # otherwise ""reject"" move, and stay where we are"
"0","    }"
"0","    "
"0","    A_f <- prior(newf, p[i])*likelihood(newf, p[i],nAA,nAa,naa)/"
"0","      (prior(currentf, p[i]) * likelihood(currentf, p[i],nAA,nAa,naa))"
"0","    "
"0","    if(runif(1)<A_f){"
"0","      f[i] = newf       # accept move with probabily min(1,A)"
"0","    } else {"
"0","      f[i] = currentf        # otherwise ""reject"" move, and stay where we are"
"0","    }"
"0","    "
"0","  }"
"0","  return(list(f=f,p=p)) # return a ""list"" with two elements named f and p"
"0","}"
