"0","# Need to implement a new cheating method where I don't actually call the optimization"
"0","eb_hypothesis_test_cheat_plot_pFDR <- function(pi_zero, mixt_sd, num_sim = 100) {"
"0","  "
"0","  fdr_vec <- c()"
"0","  "
"0","  for(alpha in seq(from = .05, to = .5, by = .05)) {"
"0","    "
"0","    mean_fdr <- 0"
"0","    sim <- 1"
"0","    "
"0","    while(sim <= num_sim) {"
"0","      "
"0","      data <- simulate_data(pi_zero, mixt_sd)"
"0","      D_mat <- data$D"
"0","      n <- nrow(D_mat)"
"0","      m <- ncol(D_mat)"
"0","      d_bar_vec <- colMeans(D_mat)"
"0","      gamma_vec <- numeric(m)"
"0","      for(j in seq(1, m)) {"
"0","        "
"0","        post_prob <- posterior_prob_zero(d_bar_vec[j], pi_zero, mixt_sd, n)"
"0","        gamma_vec[j] <- as.numeric(post_prob < alpha)"
"0","        "
"0","      }"
"0","      "
"0","        if(any(gamma_vec == 1)) {"
"0","          "
"0","          mean_fdr <- mean_fdr + (1 / num_sim) * e_fdr(data$beta, gamma_vec)"
"0","          sim <- sim + 1"
"0","          "
"0","        }"
"0","        "
"0","    }"
"0","    "
"0","    fdr_vec <- c(fdr_vec, mean_fdr)"
"0","    "
"0","  }"
"0","  "
"0","  if(pi_zero == 1) {"
"0","    "
"0","    plt_str <- ""EB Simulation Results for pi_zero = 1"""
"0","    "
"0","  }"
"0","  "
"0","  else {"
"0","    "
"0","    plt_str <- glue::glue(""EB Simulation Results for pi_zero = {pi_zero} and sigma_b = {mixt_sd}"")"
"0","    "
"0","  }"
"0","  "
"0","  plot(x = seq(from = .05, to = .5, by = .05), y = fdr_vec, xlab = ""alpha"", ylab = ""E[V/R | R > 0]"", main = plt_str)"
"0","  "
"0","}"
